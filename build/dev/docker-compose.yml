version: '3.2'

services:
  nginx-proxy:
    image: jwilder/nginx-proxy:1.0.1
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./nginx/certs/:/etc/nginx/certs
    networks:
      - potaynik-net

  potaynik-backend:
    env_file:
      - "${PWD}/build/.env"
    build:
      dockerfile: ./build/dev/backend/Dockerfile
      context: "${PWD}"
    environment:
      - VIRTUAL_HOST=api.potaynik.ru
    volumes:
      - "${PWD}:/go/src/github.com/artarts36/potaynik/"
    entrypoint: "go run /go/src/github.com/artarts36/potaynik/cmd/main.go"
    networks:
      - potaynik-net
    expose:
      - "${POTAYNIK_HTTP_PUBLIC_PORT}"
      - "${POTAYNIK_HTTP_HEALTH_PORT}"

  potaynik-redis:
    image: bitnami/redis:7.0.4
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - potaynik-net

  potaynik-prometheus:
    image: prom/prometheus:v2.37.1
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    environment:
      - VIRTUAL_HOST=prometheus.infra.potaynik.ru
    expose:
      - 9090
    networks:
      - monitor-net
      - potaynik-net
    labels:
      org.label-schema.group: "monitoring"

networks:
  potaynik-net:
    external: true
  monitor-net:
    driver: bridge

volumes:
  prometheus_data: {}
